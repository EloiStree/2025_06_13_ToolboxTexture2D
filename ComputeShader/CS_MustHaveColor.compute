#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;

int m_checkForRed;
int m_checkForRedInverse;
float m_colorMinRed;
float m_colorMaxRed;

int m_checkForGreen;
int m_checkForGreenInverse;
float m_colorMinGreen;
float m_colorMaxGreen;

int m_checkForBlue;
int m_checkForBlueInverse;
float m_colorMinBlue;
float m_colorMaxBlue;

int m_multiColor_or0_and1;

bool CheckColorCondition ( float colorValue, float minValue, float maxValue, int inverse)
{
    bool condition = (colorValue >= minValue && colorValue <= maxValue);
    return inverse == 1 ? !condition : condition;
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    float4 color = m_source[id.xy];
    bool shouldSetColor = false;

    // Helper function to check color condition
    
    // Check for individual colors
    if (m_checkForRed && !m_checkForGreen && !m_checkForBlue)
    {
        shouldSetColor = CheckColorCondition(color.r, m_colorMinRed, m_colorMaxRed, m_checkForRedInverse);
    }
    else if (!m_checkForRed && m_checkForGreen && !m_checkForBlue)
    {
        shouldSetColor = CheckColorCondition(color.g, m_colorMinGreen, m_colorMaxGreen, m_checkForGreenInverse);
    }
    else if (!m_checkForRed && !m_checkForGreen && m_checkForBlue)
    {
        shouldSetColor = CheckColorCondition(color.b, m_colorMinBlue, m_colorMaxBlue, m_checkForBlueInverse);
    }
    // Check for combinations of colors
    else if (m_checkForRed && m_checkForGreen && !m_checkForBlue)
    {
        bool redCondition = CheckColorCondition(color.r, m_colorMinRed, m_colorMaxRed, m_checkForRedInverse);
        bool greenCondition = CheckColorCondition(color.g, m_colorMinGreen, m_colorMaxGreen, m_checkForGreenInverse);
        shouldSetColor = m_multiColor_or0_and1 == 1 ? (redCondition && greenCondition) : (redCondition || greenCondition);
    }
    else if (m_checkForRed && !m_checkForGreen && m_checkForBlue)
    {
        bool redCondition = CheckColorCondition(color.r, m_colorMinRed, m_colorMaxRed, m_checkForRedInverse);
        bool blueCondition = CheckColorCondition(color.b, m_colorMinBlue, m_colorMaxBlue, m_checkForBlueInverse);
        shouldSetColor = m_multiColor_or0_and1 == 1 ? (redCondition && blueCondition) : (redCondition || blueCondition);
    }
    else if (m_checkForRed && m_checkForGreen && m_checkForBlue)
    {
        bool redCondition = CheckColorCondition(color.r, m_colorMinRed, m_colorMaxRed, m_checkForRedInverse);
        bool greenCondition = CheckColorCondition(color.g, m_colorMinGreen, m_colorMaxGreen, m_checkForGreenInverse);
        bool blueCondition = CheckColorCondition(color.b, m_colorMinBlue, m_colorMaxBlue, m_checkForBlueInverse);
        shouldSetColor = m_multiColor_or0_and1 == 1 ? (redCondition && greenCondition && blueCondition) : (redCondition || greenCondition || blueCondition);
    }

    // Set the result color
    m_result[id.xy] = shouldSetColor ? color : float4(0, 0, 0, 0);
}
