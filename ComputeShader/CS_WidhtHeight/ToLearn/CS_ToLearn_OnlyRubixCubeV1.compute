#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

   
    float4 c = m_source[id.xy];

    // Correct min calculation
    float min = c.r;
    if (c.g < min)
        min = c.g;
    if (c.b < min)
        min = c.b;

    float blackLimit = 0.3;
    if (c.g < blackLimit && c.r < blackLimit && c.b < blackLimit )
    {
        m_result[id.xy] = float4(0, 0, 0, 1);
        return;
    }

    // Correct max calculation
    float max = c.r;
    if (c.g > max)
        max = c.g;
    if (c.b > max)
        max = c.b;

    float deltaMinMax = min - max;
    if (deltaMinMax < 0)
        deltaMinMax = -deltaMinMax;

    // FLAT COLOR
    if (deltaMinMax < 0.1)
    {
        float allow = 0.85;
        if (c.r > allow && c.g > allow && c.b > allow)
            m_result[id.xy] = float4(1, 1, 1, 1);
        else
            m_result[id.xy] = float4(0, 0, 0, 1);
        return;
    }
    
    //float average = (c.r + c.g + c.b) * 0.333;
    //if (aver)
    
        
    float allow = 0.85;
    if (c.r > allow && c.g > allow && c.b > allow)
        m_result[id.xy] = float4(1, 1, 1, 1);
    else if (c.r > 0.9 && c.g > 0.80 && c.r > c.b)
        m_result[id.xy] = float4(1, 1, 0, 1);
    else if (c.r > 0.9 && c.g > 0.25 && c.b < c.g)
        m_result[id.xy] = float4(1, 0.5, 0, 1);
    else if (c.r > c.g && c.r > c.b)
        m_result[id.xy] = float4(1, 0, 0, 1);
    else if (c.g > c.r && c.g > c.b)
        m_result[id.xy] = float4(0, 1, 0, 1);
    else if (c.b > c.g && c.b > c.r)
        m_result[id.xy] = float4(0, 0, 1, 1);
    else
        m_result[id.xy] = float4(0, 0, 0, 1);
    
    
}
