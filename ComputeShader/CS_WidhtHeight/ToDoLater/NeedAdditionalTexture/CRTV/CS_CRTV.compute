
//https://www.shadertoy.com/view/MdlGRB
//#pragma kernel CSMain

//Texture2D<float4> m_source; // Input texture
//Texture2D<float4> m_offset; // Offset texture

//RWTexture2D<float4> m_result; // Output texture

//int m_width;
//int m_height;

//float iTime;

//// Helper function to fetch from m_source with distortion:
//// Convert normalized UV to integer texel coordinate
//int2 TexCoord(float2 uvCoord)
//{
//    // Clamp UV to [0,1]
//    uvCoord = clamp(uvCoord, 0.0, 1.0);
//    return int2(uvCoord.x * (m_width - 1), uvCoord.y * (m_height - 1));
//}

//[numthreads(8, 8, 1)]
//void CSMain(uint3 id : SV_DispatchThreadID)
//{
//    if (id.x >= m_width || id.y >= m_height)
//        return;

//    float2 fragCoord = float2(id.x, id.y);

//    float dispersion = 0.01;
//    float distortion = 0.04;
//    float noisestrength = 0.2;
//    float bendscale = 1.5;

//    // Normalize coordinates
//    float2 uv = fragCoord.xy / float2(m_width, m_height);
//    float2 disp = uv - float2(0.5, 0.5);
//    disp *= sqrt(length(disp));
//    uv += disp * bendscale;
//    uv = (uv + 0.5) / 2.0;

//    float2 uvr = uv * (1.0 - dispersion) + float2(dispersion, dispersion) / 2.0;
//    float2 uvg = uv * 1.0;
//    float2 uvb = uv * (1.0 + dispersion) - float2(dispersion, dispersion) / 2.0;

//    // Convert wrapped offset sample Y coordinate to texel coordinate
//    float offsetSampleY = frac(uv.y + iTime * 255.0);
//    int offsetY = (int)(offsetSampleY * (m_height - 1));

//    // Load offset at x=0, y=offsetY
//    float4 offset = m_offset.Load(int3(0, offsetY, 0));

//    // Sample R channel
//    int2 coord_r = TexCoord(float2(1.0 - uvr.x, uvr.y) + offset.x * distortion);
//    float4 tex_r = m_source.Load(int3(coord_r, 0));
//    // Sample G channel
//    int2 coord_g = TexCoord(float2(1.0 - uvg.x, uvg.y) + offset.x * distortion);
//    float4 tex_g = m_source.Load(int3(coord_g, 0));
//    // Sample B channel
//    int2 coord_b = TexCoord(float2(1.0 - uvb.x, uvb.y) + offset.x * distortion);
//    float4 tex_b = m_source.Load(int3(coord_b, 0));

//    float r = lerp(tex_r.x, offset.x, noisestrength);
//    float g = lerp(tex_g.y, offset.y, noisestrength);
//    float b = lerp(tex_b.z, offset.z, noisestrength);

//    float4 fragColor;

//    if (uv.x > 0.0 && uv.x < 1.0 && uv.y > 0.0 && uv.y < 1.0)
//    {
//        float stripes = sin(uv.y * 300.0 + iTime * 10.0);
//        float3 col = float3(r, g, b);
//        col = lerp(col, float3(0.8, 0.8, 0.8), stripes / 20.0);
//        fragColor = float4(col, 1.0);
//    }
//    else
//    {
//        fragColor = float4(0, 0, 0, 1);
//    }

//    m_result[id.xy] = fragColor;
//}
