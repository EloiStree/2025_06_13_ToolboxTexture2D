// Unity URP Compute Shader version of the provided ShaderToy code

#pragma kernel CSMain

RWTexture2D<float4> m_source; // Input texture
RWTexture2D<float4> m_result; // Output texture

int m_width;
int m_height;
float m_time;

static const float spacing = 7.0;
static const float thick = 0.5;

// Stripe function
float to_stripe(float frag_y) {
    float saw = fmod(frag_y, spacing) - 0.5 * spacing;
    float tri = abs(saw);
    tri = tri - 0.5 * thick;
    return clamp(tri, 0.0, 1.0);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height) return;

    float2 fragCoord = float2(id.x, id.y);

    // Sample y position snapped to spacing
    float y_samp = fragCoord.y - fmod(fragCoord.y, spacing);

    // Normalized pixel coordinates (from 0 to 1)
    float2 uv = float2(fragCoord.x, y_samp) / float2(m_width, m_height);

    // Sample brightness from input texture
    float3 srcColor = m_source[id.xy].rgb;
    float bright = dot(srcColor, float3(0.57735, 0.57735, 0.57735));
    bright = clamp(bright, 0.0, 1.0);

    // Perturb y by brightness
    float perturbed_y = fragCoord.y + spacing * bright;

    // Stripe color
    float stripe = to_stripe(perturbed_y);
    float3 col = float3(stripe, stripe, stripe);

    // Write result
    m_result[id.xy] = float4(col, 1.0);
}