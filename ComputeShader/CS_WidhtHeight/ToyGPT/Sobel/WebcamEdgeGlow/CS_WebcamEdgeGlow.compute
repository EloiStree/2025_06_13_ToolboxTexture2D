#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    int2 coord = int2(id.xy);
    float offset = 1.0; // Pixel offset in integer texel units

    float4 gx = float4(0.0, 0.0, 0.0, 0.0);
    float4 gy = float4(0.0, 0.0, 0.0, 0.0);
    float4 t;

    int2 o0 = int2(-1, 1);
    int2 o1 = int2(-1, 0);
    int2 o2 = int2(-1, -1);
    int2 o3 = int2(0, 1);
    int2 o4 = int2(0, -1);
    int2 o5 = int2(1, 1);
    int2 o6 = int2(1, 0);
    int2 o7 = int2(1, -1);

    // Read pixels with clamping
    float4 s0 = m_source[clamp(coord + o0, int2(0, 0), int2(m_width - 1, m_height - 1))];
    float4 s1 = m_source[clamp(coord + o1, int2(0, 0), int2(m_width - 1, m_height - 1))];
    float4 s2 = m_source[clamp(coord + o2, int2(0, 0), int2(m_width - 1, m_height - 1))];
    float4 s3 = m_source[clamp(coord + o3, int2(0, 0), int2(m_width - 1, m_height - 1))];
    float4 s4 = m_source[clamp(coord + o4, int2(0, 0), int2(m_width - 1, m_height - 1))];
    float4 s5 = m_source[clamp(coord + o5, int2(0, 0), int2(m_width - 1, m_height - 1))];
    float4 s6 = m_source[clamp(coord + o6, int2(0, 0), int2(m_width - 1, m_height - 1))];
    float4 s7 = m_source[clamp(coord + o7, int2(0, 0), int2(m_width - 1, m_height - 1))];
    float4 s8 = m_source[clamp(coord, int2(0, 0), int2(m_width - 1, m_height - 1))];

    // Sobel X
    gx += s2 + 2.0 * s1 + s0;
    gx -= s7 + 2.0 * s6 + s5;

    // Sobel Y
    gy += s0 + 2.0 * s3 + s5;
    gy -= s2 + 2.0 * s4 + s7;

    float4 grad = sqrt(gx * gx + gy * gy);
    
    grad.a = 1;
    m_result[coord] = grad;
}
