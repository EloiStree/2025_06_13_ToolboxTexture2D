#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;

#define THRESHOLD 0.5

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    int2 pixelCoord = int2(id.xy);
    float2 resolution = float2(m_width, m_height);
    float2 uv = (float2) pixelCoord / resolution;

    float3 count = float3(0.0, 0.0, 0.0);

    // Neighbor sampling (3x3 kernel)
    for (int j = -1; j <= 1; ++j)
    {
        for (int i = -1; i <= 1; ++i)
        {
            int2 offset = pixelCoord + int2(i, j);
            // Wrap edges
            offset = (offset + int2(m_width, m_height)) % int2(m_width, m_height);

            float3 sample = m_source[offset].xyz;
            count += step(THRESHOLD.xxx, sample);
        }
    }

    float3 col = m_source[pixelCoord].xyz;

    float3 alivestate = 1.0 - step(0.0.xxx, abs(count - 2.5) - 0.6);
    float3 deadstate = 1.0 - step(0.1.xxx, abs(3.0 - count));

    float3 color = lerp(deadstate, alivestate, step(THRESHOLD.xxx, 1.0 - col));

    m_result[pixelCoord] = float4(color, 1.0);
}
