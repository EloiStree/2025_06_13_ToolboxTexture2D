// I FAIL TO CONVERT IT WITH GPT

//#pragma kernel CSMain

//RWTexture2D<float4> m_source;
//RWTexture2D<float4> m_result;
//int m_width;
//int m_height;

//#define PALETTE_SIZE 16
//float resolution = 320.0;
//float ditherness = 0.5;

//// Palette definition
//static const float3 palette[PALETTE_SIZE] =
//{
//    float3(0.0, 0.0, 0.0),
//    float3(0.11372549, 0.16862745, 0.3254902),
//    float3(0.49411765, 0.14509804, 0.3254902),
//    float3(0.0, 0.5294118, 0.31764707),
//    float3(0.67058825, 0.32156864, 0.21176471),
//    float3(0.37254903, 0.34117648, 0.30980393),
//    float3(0.7607843, 0.7647059, 0.78039217),
//    float3(1.0, 0.94509804, 0.9098039),
//    float3(1.0, 0.0, 0.3019608),
//    float3(1.0, 0.6392157, 0.0),
//    float3(1.0, 0.9254902, 0.15294118),
//    float3(0.0, 0.89411765, 0.2117647),
//    float3(0.16078432, 0.6784314, 1.0),
//    float3(0.5137255, 0.4627451, 0.6117647),
//    float3(1.0, 0.46666667, 0.65882355),
//    float3(1.0, 0.8, 0.6666667)
//};

//// Function to find the closest colors in the palette
//float3 Palettize(float3 col, int2 fragCoord)
//{
//    float distA = 1000.0;
//    float distB = 1000.0;
//    float3 a = float3(0, 0, 0);
//    float3 b = float3(0, 0, 0);
//    uint indexA = 0;
//    uint indexB = 0;

//    for (int i = 0; i < PALETTE_SIZE; ++i)
//    {
//        float3 delta = abs(palette[i] - col);
//        float testDist = dot(delta, float3(1.0, 1.0, 1.0));

//        if (testDist < distA)
//        {
//            distB = distA;
//            b = a;
//            indexB = indexA;
//            distA = testDist;
//            a = palette[i];
//            indexA = i;
//        }
//        else if (testDist < distB)
//        {
//            distB = testDist;
//            b = palette[i];
//            indexB = i;
//        }
//    }

//    if (distA * (1.0 + ditherness) < distB)
//        b = a;

//    bool stipple = ((fragCoord.x % 2) == (fragCoord.y % 2)) == (indexA < indexB);
//    return stipple ? a : b;
//}

//[numthreads(8, 8, 1)]
//void CSMain(uint3 id : SV_DispatchThreadID)
//{
//    if (id.x >= (uint) m_width || id.y >= (uint) m_height)
//        return;

//    int2 fragCoord = int2(id.xy);
//    float scale = max(1.0, floor((float) m_width / resolution));
//    int2 scaledCoord = fragCoord / (int) scale;

//    scaledCoord = clamp(scaledCoord, int2(0, 0), int2(m_width - 1, m_height - 1));
//    float2 uv = (float2) scaledCoord / float2(m_width, m_height);

//    float4 srcColor = m_source[scaledCoord];
//    float3 col = srcColor.rgb * 2.0;

//    col = clamp(col, 0.0, 1.0);
//    float3 finalCol = Palettize(col, scaledCoord);
//    m_result[int2(id.xy)] = float4(finalCol, 1);
//}
