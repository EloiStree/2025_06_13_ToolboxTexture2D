#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;
float m_time;
int m_vertical; // 1 = vertical blur, 0 = horizontal blur

#define BLUR_SIZE 20
#define BLUR_WIDTH 1.0

float gauss(float x, float e)
{
    return exp(-x * x / e);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    float2 uv = float2(id.xy) / float2(m_width, m_height);
    float4 pixval = float4(0.0, 0.0, 0.0, 0.0);
    float tot = 0.0;

    float variance = 20.0 * BLUR_SIZE * (0.5 + 0.5 * sin(m_time * 2.0));
    int nb = 2 * BLUR_SIZE + 1;

    for (int i = 0; i < nb; i++)
    {
        float offsetVal = BLUR_WIDTH * (i - BLUR_SIZE);
        int2 offset = m_vertical == 1 ?
            int2(0, int(offsetVal)) :
            int2(int(offsetVal), 0);

        int2 coord = int2(id.xy) + offset;

        // Clamp to image bounds
        coord = clamp(coord, int2(0, 0), int2(m_width - 1, m_height - 1));

        float g = gauss(offsetVal, variance);
        pixval += g * m_source[coord];
        tot += g;
    }

    m_result[id.xy] = pixval / tot;
}
