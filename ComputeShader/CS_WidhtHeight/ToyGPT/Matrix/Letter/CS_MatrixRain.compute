//https://www.shadertoy.com/view/dlSSWy
////////////// FAIL TO CONVERT WITH GPT

#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;
float m_time;

#define RAIN_SPEED 1.75
#define DROP_SIZE  3.0
#define GIVEN_TIME  3.0

float rand(float2 co)
{
    return frac(sin(dot(co, float2(12.9898, 78.233))) * 43758.5453);
}

float rchar(float2 outer, float2 inner, float globalTime)
{
    float2 seed = floor(inner * 4.0) + outer.y;
    if (rand(float2(outer.y, 23.0)) > 0.98)
    {
        seed += floor((globalTime + rand(float2(outer.y, 49.0))) * 3.0);
    }
    return rand(seed) > 0.5 ? 1.0 : 0.0;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    float2 fragCoord = float2(id.x, id.y);
    float2 iResolution = float2(m_width, m_height);
    float2 position = fragCoord / iResolution;
    float2 uv = position;

    position.x /= (iResolution.x / iResolution.y);
    float globalTime = GIVEN_TIME * RAIN_SPEED;

    float scaledown = DROP_SIZE;
    float rx = fragCoord.x / (40.0 * scaledown);
    float mx = 40.0 * scaledown * frac(position.x * 30.0 * scaledown);
    float4 result = float4(0, 0, 0, 0);

    if (mx <= 12.0 * scaledown)
    {
        float x = floor(rx);
        float r1x = floor(fragCoord.x / 15.0);

        float ry = position.y * 600.0 + rand(float2(x, x * 3.0)) * 100000.0 + globalTime * rand(float2(r1x, 23.0)) * 120.0;
        float my = fmod(ry, 15.0);
        if (my <= 12.0 * scaledown)
        {
            float y = floor(ry / 15.0);
            float b = rchar(float2(rx, floor(ry / 15.0)), float2(mx, my) / 12.0, globalTime);
            float col = max(fmod(-y, 24.0) - 4.0, 0.0) / 20.0;
            float3 c = col < 0.8 ? float3(0.0, col / 0.8, 0.0) : lerp(float3(0.0, 1.0, 0.0), float3(1.0, 1.0, 1.0), (col - 0.8) / 0.2);
            result = float4(c * b, 1.0);
        }
    }

    position.x += 0.05;

    scaledown = DROP_SIZE;
    rx = fragCoord.x / (40.0 * scaledown);
    mx = 40.0 * scaledown * frac(position.x * 30.0 * scaledown);

    if (mx <= 12.0 * scaledown)
    {
        float x = floor(rx);
        float r1x = floor(fragCoord.x / 12.0);

        float ry = position.y * 700.0 + rand(float2(x, x * 3.0)) * 100000.0 + globalTime * rand(float2(r1x, 23.0)) * 120.0;
        float my = fmod(ry, 15.0);
        if (my <= 12.0 * scaledown)
        {
            float y = floor(ry / 15.0);
            float b = rchar(float2(rx, floor(ry / 15.0)), float2(mx, my) / 12.0, globalTime);
            float col = max(fmod(-y, 24.0) - 4.0, 0.0) / 20.0;
            float3 c = col < 0.8 ? float3(0.0, col / 0.8, 0.0) : lerp(float3(0.0, 1.0, 0.0), float3(1.0, 1.0, 1.0), (col - 0.8) / 0.2);
            result += float4(c * b, 1.0);
        }
    }

    float3 baseColor = m_source[id.xy].rgb;
    result = result * length(baseColor) + 0.22 * float4(0.0, baseColor.g, 0.0, 1.0);

    if (result.b < 0.5)
        result.b = result.g * 0.5;

    m_result[id.xy] = result;
}
