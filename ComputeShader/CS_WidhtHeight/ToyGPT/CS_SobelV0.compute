#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;
int m_width;
int m_height;
int m_pixelCount;
bool m_invert = true;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    float Gx[3][3] =
    {
        { -1, 0, 1 },
        { -2, 0, 2 },
        { -1, 0, 1 }
    };

    float Gy[3][3] =
    {
        { 1, 2, 1 },
        { 0, 0, 0 },
        { -1, -2, -1 }
    };

    float3 sumX = float3(0, 0, 0);
    float3 sumY = float3(0, 0, 0);

    for (int y = -1; y <= 1; y++)
    {
        for (int x = -1; x <= 1; x++)
        {
            int2 samplePos = int2(id.xy) + int2(x, y);
            samplePos = clamp(samplePos, int2(0, 0), int2(m_width - 1, m_height - 1));

            float3 color = m_source[samplePos].rgb;

            sumX += color * Gx[y + 1][x + 1];
            sumY += color * Gy[y + 1][x + 1];
        }
    }

    float3 edge = sqrt(sumX * sumX + sumY * sumY);

    // Normalize edge to [0, 1] (optional, depending on color range)
    edge = saturate(edge);

    // Invert if needed
    if (m_invert)
    {
        edge = 1.0 - edge;
    }

    m_result[id.xy] = float4(edge, 1.0);
}
