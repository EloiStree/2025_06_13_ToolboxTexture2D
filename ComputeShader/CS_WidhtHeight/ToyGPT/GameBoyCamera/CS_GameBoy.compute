#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 112
#define SCREEN_OFFSET_X -50
#define SCREEN_OFFSET_Y -10
#define PIXEL_SIZE 1

struct Palette
{
    float3 color;
};

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    // Define the 4-color palette
    Palette palette[4];
    palette[0].color = float3(8, 24, 32) / 255.0;
    palette[1].color = float3(52, 104, 86) / 255.0;
    palette[2].color = float3(136, 192, 112) / 255.0;
    palette[3].color = float3(224, 248, 208) / 255.0;

    float2 screenSize = float2(SCREEN_WIDTH, SCREEN_HEIGHT);

    // Calculate the scaled width and height for aspect ratio
    float scaledWidth = screenSize.y * m_width / m_height;
    float scaledHeight = screenSize.y;

    // Centering and cropping
    float2 uv = float2(id.xy) / float2(m_width, m_height);
    uv = floor(uv * float2(scaledWidth, scaledHeight));

    float4 finalColor = float4(0, 0, 0, 1.0);

    if (abs(uv.x * 2.0 - scaledWidth) < screenSize.x)
    {
        // Offset into centered 128x112 window
        uint2 coordinate = uint2(uv);
        coordinate.x += m_width / 2 - SCREEN_WIDTH / 2;
        coordinate.y += m_height / 2 - SCREEN_HEIGHT / 2;

        // Pixelate: align to PIXEL_SIZE block
        float2 d = 1.0 / float2(m_width, m_height);
        float2 blockUV = d * PIXEL_SIZE * floor(coordinate / PIXEL_SIZE);

        float4 avgColor = float4(0, 0, 0, 0);

        // Average over PIXEL_SIZE x PIXEL_SIZE block
        for (int i = 0; i < PIXEL_SIZE; i++)
        {
            for (int j = 0; j < PIXEL_SIZE; j++)
            {
                float2 sampleUV = blockUV + float2(d.x * i, d.y * j);
                int2 sampleCoord = int2(sampleUV * float2(m_width, m_height));
                avgColor += m_source[sampleCoord];
            }
        }

        avgColor /= (PIXEL_SIZE * PIXEL_SIZE);

        // Convert to grayscale
        float gray = dot(avgColor.rgb, float3(0.2126, 0.7152, 0.0722));

        // Bayer dithering
        int divider = 32;
        float bayer4x4[16] =
        {
            0.0 / divider, 8.0 / divider, 2.0 / divider, 10.0 / divider,
            12.0 / divider, 4.0 / divider, 14.0 / divider, 6.0 / divider,
            3.0 / divider, 11.0 / divider, 1.0 / divider, 9.0 / divider,
            15.0 / divider, 7.0 / divider, 13.0 / divider, 5.0 / divider
        };
        int bx = coordinate.x % 4;
        int by = coordinate.y % 4;
        float dither = bayer4x4[by * 4 + bx];

        int value = int(floor(gray * 3.0 + dither));
        value = clamp(value, 0, 3);

        finalColor.rgb = palette[value].color;
    }

    m_result[id.xy] = finalColor;
}
