#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;
float m_time;

//#define pct 0.003
#define pct 0.006

float offset()
{
    return pct;
}


[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    float2 uv = float2(id.x, id.y) / float2(m_width, m_height);
    float2 redSamplePos = float2(uv.x - offset(), uv.y);
    float2 blueSamplePos = float2(uv.x + offset(), uv.y);

    // Sample source texture
    float4 textureColor = m_source[id.xy];
    // Clamp sample positions to valid range
    int2 redSampleIdx = int2(clamp((redSamplePos.x * m_width), 0, m_width - 1), clamp((redSamplePos.y * m_height), 0, m_height - 1));
    int2 blueSampleIdx = int2(clamp((blueSamplePos.x * m_width), 0, m_width - 1), clamp((blueSamplePos.y * m_height), 0, m_height - 1));

    float redAmount = m_source[redSampleIdx].r;
    float blueAmount = m_source[blueSampleIdx].b;

    float4 result = float4(redAmount, textureColor.g, blueAmount, textureColor.a);
    m_result[id.xy] = result;
}