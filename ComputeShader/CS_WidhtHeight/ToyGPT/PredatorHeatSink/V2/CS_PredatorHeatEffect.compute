#pragma kernel CSMain

// Define the input and output textures
RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

// Define the width and height of the texture
int m_width;
int m_height;

// Thermal vision function
float3 thermal_vision(float3 color)
{
    float3 colors[3];
    colors[0] = float3(0.0, 0.0, 1.0);
    colors[1] = float3(1.0, 1.0, 0.0);
    colors[2] = float3(1.0, 0.0, 0.0);
    float luminance = dot(float3(0.40, 0.38, 0.25), color);
    if (luminance < 0.5)
    {
        color = lerp(colors[0], colors[1], luminance / 0.5);
    }
    else
    {
        color = lerp(colors[1], colors[2], (luminance - 0.5) / 0.5);
    }
    return color;
}

// Main kernel function
[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    // Calculate UV coordinates
    float2 uv = float2(id.x / (float)m_width, id.y / (float)m_height);

    // Sample the source texture with original UV (no color shift)
    float2 texelPos = uv * float2(m_width, m_height);
    int2 samplePos = int2(clamp(texelPos.x, 0, m_width - 1), clamp(texelPos.y, 0, m_height - 1));
    float4 srcColor = m_source[samplePos];

    // Apply thermal vision effect
    float3 finalColor = thermal_vision(srcColor.rgb);

    // Write result
    m_result[id.xy] = float4(finalColor, 1.0);
}
