#pragma kernel CSMain

RWTexture2D<float4> m_source; // Input texture (equivalent to iChannel0)
RWTexture2D<float4> m_result; // Output texture

int m_width;
int m_height;

#define PIXEL_SIZE 16

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    float4 fragColor = float4(0, 0, 0, 0);

    // Calculate pixel size in UV space (normalized coords)
    float2 d = 1.0 / float2(m_width, m_height);

    // Calculate uv aligned to PIXEL_SIZE blocks
    float2 uv = d * PIXEL_SIZE * floor(id.xy / PIXEL_SIZE);

    // Accumulate color over the PIXEL_SIZE x PIXEL_SIZE block
    for (int i = 0; i < PIXEL_SIZE; i++)
    {
        for (int j = 0; j < PIXEL_SIZE; j++)
        {
            float2 sampleUV = uv + float2(d.x * i, d.y * j);
            // Convert UV to texel coordinate for Load()
            int2 sampleCoord = int2(sampleUV * float2(m_width, m_height));
            fragColor += m_source[sampleCoord];
        }
    }

    // Average over the block pixels
    fragColor /= (PIXEL_SIZE * PIXEL_SIZE);

    // Write the result
    m_result[id.xy] = fragColor;
}
