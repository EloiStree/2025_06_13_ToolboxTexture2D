#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;
float m_time;

#define mouse_x_pct 0.5
#define mouse_y_pct 0.5

#define si 5.0

float4 colorAdjust(float4 col)
{
    // simulate film colors
    col = float4(col.x * 0.8 + col.y * 0.2,
                 col.x * 0.2 + col.y * 0.6 + col.z * 0.2,
                 col.y * 0.7 + col.z * 0.3, 1);
    // increase saturation
    float sat = 1.0;
    float o = 1.0 + sat;
    float z = -sat / 2.0;
    col = float4(col.x * o + col.y * z + col.z * z,
                 col.x * z + col.y * o + col.z * z,
                 col.x * z + col.y * z + col.z * o, 1);
    return col;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height) return;

    // Invert only the x axis of the pixel
    uint inv_x = m_width - 1 - id.x;
    uint inv_y = id.y;

    float2 fragCoord = float2(inv_x, inv_y);
    float2 resolution = float2(m_width, m_height);
    float2 mouse = float2(mouse_x_pct*m_width, mouse_y_pct*m_height);
    float radius = 0.5;
    float contrast = 0.3;

    if (length(mouse) > 0.0)
    {
        contrast = mouse.y / m_height;
        radius = mouse.x / m_width;
    }

    float muln = 1.0 / pow((si) * 2.0, 2.0);
    float blurs = pow(radius, 5.0) / (si * 2.0);

    float2 uv = (resolution - fragCoord) / resolution;
    float4 color = float4(0,0,0,0);
    for (float x = -si + 0.5; x < si; x++)
    {
        for (float y = -si + 0.5; y < si; y++)
        {
            float2 offset = blurs * float2(x, y);
            float2 sampleUV = uv + offset;
            float2 texCoord = sampleUV * float2(m_width, m_height);
            texCoord = clamp(texCoord, float2(0,0), float2(m_width-1, m_height-1));
            float4 col = m_source[uint2(texCoord)];
            color += col;
        }
    }
    float2 orgTexCoord = uv * float2(m_width, m_height);
    orgTexCoord = clamp(orgTexCoord, float2(0,0), float2(m_width-1, m_height-1));
    float4 org = m_source[uint2(orgTexCoord)];
    float4 sharpenedImage = org - color * muln;
    float4 result = colorAdjust(sharpenedImage * 0.005 * (20.0 * pow(contrast, 3.0)) / blurs + 0.3 * org + 0.3);

    
 
    // Remove these lines, as modifying id.x and id.y is not allowed and has no effect.
    //id.x = m_width - id.x;
    id.y = m_height - id.y;
 
    
    m_result[id.xy] = result;
}