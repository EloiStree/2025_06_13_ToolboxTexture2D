#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;
float m_time;

#define percent_left 0.45
#define percent_right 0.45
#define percent_top 0.45
#define percent_down 0.45

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;

    int out_x = id.x;
    int out_y = id.y;

    float crop_left = percent_left;
    float crop_right = 1.0 - percent_right;
    float crop_top = percent_top;
    float crop_bottom = 1.0 - percent_down;

    float cropped_width = crop_right - crop_left;
    float cropped_height = crop_bottom - crop_top;

    float u = (float) out_x / (float) m_width;
    float v = (float) out_y / (float) m_height;

    float src_u = crop_left + u * cropped_width;
    float src_v = crop_top + v * cropped_height;

    float2 sourceUV = float2(src_u, src_v) * float2(m_width, m_height);

    float2 uv_floor = floor(sourceUV);
    float2 uv_frac = sourceUV - uv_floor;

    int2 p0 = int2(uv_floor);
    int2 p1 = int2(p0.x + 1, p0.y);
    int2 p2 = int2(p0.x, p0.y + 1);
    int2 p3 = int2(p0.x + 1, p0.y + 1);

    p0 = clamp(p0, int2(0, 0), int2(m_width - 1, m_height - 1));
    p1 = clamp(p1, int2(0, 0), int2(m_width - 1, m_height - 1));
    p2 = clamp(p2, int2(0, 0), int2(m_width - 1, m_height - 1));
    p3 = clamp(p3, int2(0, 0), int2(m_width - 1, m_height - 1));

    float4 c0 = m_source[p0];
    float4 c1 = m_source[p1];
    float4 c2 = m_source[p2];
    float4 c3 = m_source[p3];

    float4 c01 = lerp(c0, c1, uv_frac.x);
    float4 c23 = lerp(c2, c3, uv_frac.x);
    float4 color = lerp(c01, c23, uv_frac.y);

    m_result[int2(out_x, out_y)] = color;
}
