#pragma kernel CSMain

RWTexture2D<float4> m_source;
RWTexture2D<float4> m_result;

int m_width;
int m_height;

int m_inverseGlobal;
float m_flatPercentRed = 0.1;
float m_flatPercentGreen = 0.1;
float m_flatPercentBlue = 0.1;

float m_blackPercent = 0.1f;
float m_whitePercent = 0.1f;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= m_width || id.y >= m_height)
        return;
    float4 color = m_source[id.xy];
    if (m_blackPercent > 0)
    {
        bool isBlack = color.r < m_blackPercent &&
                       color.g < m_blackPercent &&
                       color.b < m_blackPercent;

        if (isBlack)
        {
            m_result[id.xy] = (m_inverseGlobal != 1) ? color : float4(0, 0, 0, 0);
            return;
        }
    }

    // Check white
    if (m_whitePercent > 0)
    {
        bool isWhite = color.r > (1.0 - m_whitePercent) &&
                       color.g > (1.0 - m_whitePercent) &&
                       color.b > (1.0 - m_whitePercent);

        if (isWhite)
        {
            m_result[id.xy] = (m_inverseGlobal != 1) ? color : float4(0, 0, 0, 0);
            return;
        }
    }

    if (color.r > 0 && color.g > 0 && color.b > 0)
    {
        
        float average = (color.r + color.g + color.b) / 3.0f;
        float deltaR = abs(color.r - average);
        float deltaG = abs(color.g - average);
        float deltaB = abs(color.b - average);

        bool isFlat = deltaR < m_flatPercentRed &&
                      deltaG < m_flatPercentGreen &&
                      deltaB < m_flatPercentBlue;

        m_result[id.xy] = (m_inverseGlobal != 1)
                          ? (isFlat ? color : float4(0, 0, 0, 0))
                          : (isFlat ? float4(0, 0, 0, 0) : color);
    }
}
